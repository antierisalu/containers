services:
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/prometheus_data:/prometheus
    ports:
      - 9099:9090
    networks:
      - seafile-net
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles' 
    user: "1001"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - 8099:8080
    networks:
      - seafile-net
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - 9100:9100
    networks:
      - seafile-net
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($$|/)"'

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    ports:
      - 3000:3000
    networks:
      - seafile-net
    volumes:
      - ./grafana:/var/lib/grafana
    user: "1001"

  nginx-proxy-manager:
    image: jc21/nginx-proxy-manager:latest
    container_name: nginx
    ports:
        - 80:80
        - 81:81
    volumes:
        - ./nginx_data:/data
        - ./letsencrypt:/etc/letsencrypt
    networks:
        - seafile-net
    extra_hosts:
        - "host.docker.internal:host-gateway"
    restart: unless-stopped

  homeassistant:
    container_name: homeassistant
    image: "ghcr.io/home-assistant/home-assistant:stable"
    ports:
      - 8123:8123
    volumes:
      - ./home-assistant:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    restart: unless-stopped
    networks:
      - seafile-net
    privileged: true
#    network_mode: host

  db:
    image: mariadb:10.11
    container_name: seafile-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${SEAFILE_MYSQL_PW}  # Requested, set the root's password of MySQL service.
      - MYSQL_LOG_CONSOLE=true
    volumes:
      - /srv/db:/var/lib/mysql   # Requested, specifies the path to Seafile data persistent
    networks:
      - seafile-net
    restart: unless-stopped
  memcached:
    image: memcached:1.6
    container_name: seafile-memcached
    entrypoint: memcached -m 256
    networks:
      - seafile-net
    restart: unless-stopped
  seafile:
    image: seafileltd/seafile-mc:11.0-latest
    container_name: seafile
    volumes:
      - /srv/seafile_data:/shared   # Requested, specifies the path to Seafile data persistent store.
    environment:
      - DB_HOST=${SEAFILE_MYSQL_HOST}
      - DB_ROOT_PASSWD=${SEAFILE_MYSQL_PW}  # Requested, the value should be root's password of MySQL service.
      - TIME_ZONE=Europe/Tallinn  # Optional, default is UTC. Should be uncomment and set to your local time zone.
      - SEAFILE_SERVER_LETSENCRYPT=false
      - SEAFILE_SERVER_HOSTNAME=${SEAFILE_HOSTNAME} # Specifies your host name if https is enabled.
    depends_on:
      - db
      - memcached
    networks:
      - seafile-net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "ls /opt/seafile/seafile-data/ > /dev/null || exit 1"]
      interval: 60m
      timeout: 1m
      retries: 3

  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    volumes:
      - ./jellyfin/config:/config
      - ./jellyfin/cache:/cache
      - type: bind
        source: /srv/
        target: /media
    networks:
      - seafile-net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "ls /media/MOVIE | grep . > /dev/null || exit 1"]
      interval: 60m
      timeout: 10s
      retries: 2
  
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:2.21.0
    command: -H unix:///var/run/docker.sock
    restart: unless-stopped
    environment:
      - VIRTUAL_HOST=${PORTAINER_HOSTNAME}
      - VIRTUAL_PORT=9000
    ports:
      - 8000:8000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer:/data
    networks:
      - seafile-net

  audiobookshelf:
    container_name: audiobookshelf
    image: ghcr.io/advplyr/audiobookshelf:latest
    volumes:
      - /srv/BOOK:/audiobooks
      - ./audiobookshelf/config:/config
      - ./audiobookshelf/metadata:/metadata
    networks:
      - seafile-net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "ls /audiobooks/ | grep . > /dev/null || exit 1"]
      interval: 60m
      timeout: 1s
      retries: 3

  never-server:
    image: nginx:latest
    container_name: never-server
    volumes:
      - ./never:/usr/share/nginx/html
    networks:
      - seafile-net
    restart: unless-stopped

  kala-server:
    image: nginx:latest
    container_name: kala-server
    volumes:
      - ./kala:/usr/share/nginx/html
    networks:
      - seafile-net
    restart: unless-stopped

  yoga-server:
    container_name: yoga
    build:
      context: ./yoga/js/.
      dockerfile: ./Dockerfile
    image: yoga-server:js
    networks:
      - seafile-net
    restart: unless-stopped

  gluetun:
    image: qmcgaw/gluetun
    container_name: gluetun
    restart: always
    ports:
        - 6081:10497
        - 6081:10497/udp
        - 6011:6011
    cap_add:
        - NET_ADMIN
    devices:
        - /dev/net/tun
    volumes:
        - ./gluetun:/gluetun
    environment:
        - VPN_SERVICE_PROVIDER=${WG_PROVIDER}
        - VPN_TYPE=${WG_TYPE}
        - WIREGUARD_PRIVATE_KEY=${WG_PRIVATE_KEY}
        - WIREGUARD_ADDRESSES=${WG_ADDRESSES}
        - WIREGUARD_PRESHARED_KEY=${WG_PRESHARED_KEY}
        - SERVER_REGIONS=${WG_REGIONS}
    healthcheck:
      test: ["CMD-SHELL", "/gluetun-entrypoint healthcheck"]
      interval: 5m
      timeout: 10s
      retries: 3

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:5.0.1
    container_name: qbittorrent
    network_mode: "service:gluetun"
    restart: always
    volumes:
        - ./qbittorrent:/config
        - /srv:/data # Ensure that the downloads folder is set to /data/downloads in qBittorrent
    environment:
        PUID: 1000
        PGID: 1000
        TZ: "Europe/Tallinn"
        WEBUI_PORT: 6011
    healthcheck:
      test: ["CMD-SHELL", "curl -sSf google.com > /dev/null || exit 1"]
      interval: 60m
      timeout: 5m
      retries: 3

  autoheal:
    image: willfarrell/autoheal
    container_name: autoheal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - seafile-net
    restart: always
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
      - AUTOHEAL_INTERVAL=300
networks:
  seafile-net:
